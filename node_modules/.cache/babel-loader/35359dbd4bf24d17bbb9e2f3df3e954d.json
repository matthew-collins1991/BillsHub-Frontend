{"ast":null,"code":"var getTimeToNextBill = function getTimeToNextBill(date) {\n  var one_day = 1000 * 60 * 60 * 24;\n  var date1 = new Date(date);\n  var date2 = new Date();\n  var diff = date2.getTime() - date1.getTime();\n  var diffPositive = Math.abs(diff);\n  return Math.ceil(diffPositive / one_day);\n};\n\nexport var sortDatesLowToHigh = function sortDatesLowToHigh(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a < b ? -1 : a > b ? 1 : 0;\n};\nexport var sortDatesHighToLow = function sortDatesHighToLow(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a > b ? -1 : a < b ? 1 : 0;\n};\nexport var returnSeries = function returnSeries(data) {\n  var values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  data.map(function (bill) {\n    if (getTimeToNextBill(bill.bill_date) < 304) {\n      var billDate = new Date(bill.bill_date);\n      console.log(billDate); // let thisMonthInt = today.getMonth()\n\n      var billMonthInt = billDate.getMonth();\n\n      if (billMonthInt > 9) {\n        values[billMonthInt - 12 + 3] = values[billMonthInt - 12 + 3] + bill.cost;\n      } else {\n        values[billMonthInt + 3] = values[billMonthInt + 3] + bill.cost;\n      }\n    }\n  }); // 3 empty values at the end\n\n  var series = values.map(function (value) {\n    if (value === 0) {\n      return null;\n    } else {\n      return value;\n    }\n  });\n  console.log(series);\n  return [series]; //    return [[null, null, 55, 30, 48, 78, 23, 56, null, null, null, null]]\n};","map":{"version":3,"sources":["/Users/Matt/flatiron/mod-5/BillsHub-Frontend/src/variables/DateSort.jsx"],"names":["getTimeToNextBill","date","one_day","date1","Date","date2","diff","getTime","diffPositive","Math","abs","ceil","sortDatesLowToHigh","a","b","bill_date","sortDatesHighToLow","returnSeries","data","values","map","bill","billDate","console","log","billMonthInt","getMonth","cost","series","value"],"mappings":"AAAA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAU;AAChC,MAAIC,OAAO,GAAC,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAvB;AACA,MAAIC,KAAK,GAAG,IAAIC,IAAJ,CAASH,IAAT,CAAZ;AACA,MAAII,KAAK,GAAG,IAAID,IAAJ,EAAZ;AACA,MAAIE,IAAI,GAAGD,KAAK,CAACE,OAAN,KAAkBJ,KAAK,CAACI,OAAN,EAA7B;AACA,MAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASJ,IAAT,CAAnB;AACA,SAAOG,IAAI,CAACE,IAAL,CAAUH,YAAY,GAACN,OAAvB,CAAP;AACC,CAPL;;AAUA,OAAO,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD,EAAIC,CAAJ,EAAU;AACxCD,EAAAA,CAAC,GAAG,IAAIT,IAAJ,CAASS,CAAC,CAACE,SAAX,CAAJ;AACAD,EAAAA,CAAC,GAAG,IAAIV,IAAJ,CAASU,CAAC,CAACC,SAAX,CAAJ;AACA,SAAOF,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACA,CAJG;AAMP,OAAO,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACH,CAAD,EAAIC,CAAJ,EAAU;AACxCD,EAAAA,CAAC,GAAG,IAAIT,IAAJ,CAASS,CAAC,CAACE,SAAX,CAAJ;AACAD,EAAAA,CAAC,GAAG,IAAIV,IAAJ,CAASU,CAAC,CAACC,SAAX,CAAJ;AACA,SAAOF,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACA,CAJG;AAMP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAClC,MAAIC,MAAM,GAAG,CACV,CADU,EACR,CADQ,EACN,CADM,EACJ,CADI,EACF,CADE,EACA,CADA,EACE,CADF,EACI,CADJ,EACM,CADN,EACQ,CADR,EACU,CADV,EACY,CADZ,CAAb;AAIAD,EAAAA,IAAI,CAACE,GAAL,CAAS,UAAAC,IAAI,EAAI;AACb,QAAIrB,iBAAiB,CAACqB,IAAI,CAACN,SAAN,CAAjB,GAAkC,GAAtC,EAA0C;AACtC,UAAIO,QAAQ,GAAG,IAAIlB,IAAJ,CAASiB,IAAI,CAACN,SAAd,CAAf;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAFsC,CAGtC;;AACA,UAAIG,YAAY,GAAGH,QAAQ,CAACI,QAAT,EAAnB;;AACA,UAAID,YAAY,GAAG,CAAnB,EAAsB;AACjBN,QAAAA,MAAM,CAACM,YAAY,GAAC,EAAb,GAAgB,CAAjB,CAAN,GAA4BN,MAAM,CAACM,YAAY,GAAC,EAAb,GAAgB,CAAjB,CAAN,GAA4BJ,IAAI,CAACM,IAA7D;AACA,OAFL,MAES;AACJR,QAAAA,MAAM,CAACM,YAAY,GAAC,CAAd,CAAN,GAAyBN,MAAM,CAACM,YAAY,GAAC,CAAd,CAAN,GAAyBJ,IAAI,CAACM,IAAvD;AACA;AACR;AACJ,GAZD,EALkC,CAmBlC;;AACA,MAAIC,MAAM,GAAGT,MAAM,CAACC,GAAP,CAAW,UAAAS,KAAK,EAAI;AAAC,QAAGA,KAAK,KAAK,CAAb,EAAe;AAC7C,aAAO,IAAP;AACH,KAFiC,MAE7B;AACD,aAAOA,KAAP;AACH;AAAC,GAJW,CAAb;AAMAN,EAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AAEA,SAAO,CAACA,MAAD,CAAP,CA5BkC,CA8BtC;AACC,CA/BM","sourcesContent":["const getTimeToNextBill = (date) => {\n    let one_day=1000*60*60*24\n    let date1 = new Date(date)\n    let date2 = new Date()\n    let diff = date2.getTime() - date1.getTime()\n    let diffPositive = Math.abs(diff)\n    return Math.ceil(diffPositive/one_day)\n    }\n\n\nexport const sortDatesLowToHigh = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a < b ? -1 : a > b ? 1 : 0\n   }\n\nexport const sortDatesHighToLow = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a > b ? -1 : a < b ? 1 : 0\n   }\n\nexport const returnSeries = (data) => {\n    let values = [\n       0,0,0,0,0,0,0,0,0,0,0,0\n    ]\n\n    data.map(bill => {\n        if (getTimeToNextBill(bill.bill_date)<304){\n            let billDate = new Date(bill.bill_date)\n            console.log(billDate)\n            // let thisMonthInt = today.getMonth()\n            let billMonthInt = billDate.getMonth()\n            if (billMonthInt > 9) {\n                 values[billMonthInt-12+3] = values[billMonthInt-12+3] + bill.cost\n                }else{\n                 values[billMonthInt+3] = values[billMonthInt+3] + bill.cost\n                }\n        }\n    })\n\n    // 3 empty values at the end\n    let series = values.map(value => {if(value === 0){\n        return null\n    }else{\n        return value\n    }})\n    \n    console.log(series)\n\n    return [series]\n\n//    return [[null, null, 55, 30, 48, 78, 23, 56, null, null, null, null]]\n}"]},"metadata":{},"sourceType":"module"}