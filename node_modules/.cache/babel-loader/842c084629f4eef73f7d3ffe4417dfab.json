{"ast":null,"code":"import _toConsumableArray from \"/Users/Matt/flatiron/mod-5/BillsHub-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n// import { GetBillLabels } from \"./Labels\";\nvar getTimeToNextBill = function getTimeToNextBill(date) {\n  var one_day = 1000 * 60 * 60 * 24;\n  var date1 = new Date(date);\n  var date2 = new Date();\n  var diff = date2.getTime() - date1.getTime();\n  var diffPositive = Math.abs(diff);\n  return Math.ceil(diffPositive / one_day);\n};\n\nexport var sortDatesLowToHigh = function sortDatesLowToHigh(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a < b ? -1 : a > b ? 1 : 0;\n};\nexport var sortDatesHighToLow = function sortDatesHighToLow(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a > b ? -1 : a < b ? 1 : 0;\n};\nexport var returnSeries = function returnSeries(data) {\n  var values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  console.log(data.map(d));\n  data.map(function (bill) {\n    if (getTimeToNextBill(bill.bill_date) < 324) {\n      var billDate = new Date(bill.bill_date);\n      var billMonthInt = billDate.getMonth();\n\n      if (billMonthInt > 6) {\n        return values[billMonthInt - 12 + 6] = values[billMonthInt - 12 + 6] + bill.cost;\n      } else {\n        return values[billMonthInt + 6] = values[billMonthInt + 6] + bill.cost;\n      }\n    }\n  });\n  var series = values.map(function (value) {\n    if (value === 0 || value === NaN) {\n      return null;\n    } else {\n      return value;\n    }\n  });\n  return [series];\n};\nexport var GetMonthBillCostsAndLabels = function GetMonthBillCostsAndLabels(utilities) {\n  var costArray = [];\n  var billArray = [];\n  var today = new Date();\n  var monthInt = today.getMonth(); // only select utilities that have a bill in current month\n\n  var filteredUtilities = utilities.filter(function (utility) {\n    return utility.bills.map(function (bill) {\n      return new Date(bill.bill_date).getMonth();\n    }).includes(monthInt);\n  });\n  filteredUtilities.map(function (utility) {\n    return utility.bills.map(function (bill) {\n      if (new Date(bill.bill_date).getMonth() === monthInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [].concat(_toConsumableArray(billArray), [bill]);\n      }\n    });\n  }); // pull out the duplicate utility IDs and add together the cost\n\n  billArray.forEach(function (a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n\n    this[a.utility_id].cost += a.cost;\n  }, Object.create(null));\n  return costArray;\n};","map":{"version":3,"sources":["/Users/Matt/flatiron/mod-5/BillsHub-Frontend/src/variables/DateSort.jsx"],"names":["getTimeToNextBill","date","one_day","date1","Date","date2","diff","getTime","diffPositive","Math","abs","ceil","sortDatesLowToHigh","a","b","bill_date","sortDatesHighToLow","returnSeries","data","values","console","log","map","d","bill","billDate","billMonthInt","getMonth","cost","series","value","NaN","GetMonthBillCostsAndLabels","utilities","costArray","billArray","today","monthInt","filteredUtilities","filter","utility","bills","includes","utility_type","forEach","utility_id","push","Object","create"],"mappings":"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","sourcesContent":["// import { GetBillLabels } from \"./Labels\";\n\nconst getTimeToNextBill = (date) => {\n    let one_day=1000*60*60*24\n    let date1 = new Date(date)\n    let date2 = new Date()\n    let diff = date2.getTime() - date1.getTime()\n    let diffPositive = Math.abs(diff)\n    return Math.ceil(diffPositive/one_day)\n    }\n\n\nexport const sortDatesLowToHigh = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a < b ? -1 : a > b ? 1 : 0\n   }\n\nexport const sortDatesHighToLow = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a > b ? -1 : a < b ? 1 : 0\n   }\n\nexport const returnSeries = (data) => {\n    let values = [\n       0,0,0,0,0,0,0,0,0,0,0,0\n    ]\n    console.log(data.map(d))\n    data.map(bill => {\n        if (getTimeToNextBill(bill.bill_date)<324){\n            let billDate = new Date(bill.bill_date)\n            let billMonthInt = billDate.getMonth()\n            if (billMonthInt > 6) {\n                 return values[billMonthInt-12+6] = values[billMonthInt-12+6] + bill.cost\n                }else{\n                return values[billMonthInt+6] = values[billMonthInt+6] + bill.cost\n                }\n        }\n    })\n\n    let series = values.map(value => {if(value === 0 || value === NaN){\n        return null\n    }else{\n        return value\n    }})\n    return [series]\n}\n\nexport const GetMonthBillCostsAndLabels = (utilities) => {\n    let costArray = []\n    let billArray = []\n    let today = new Date()\n    let monthInt = today.getMonth()\n\n    // only select utilities that have a bill in current month\n    let filteredUtilities = utilities.filter(utility => utility.bills.map(bill => new Date(bill.bill_date).getMonth()).includes(monthInt))\n    filteredUtilities.map(utility => utility.bills.map(bill => {\n        if(new Date(bill.bill_date).getMonth() === monthInt) {\n            bill.utility_type = utility.utility_type\n            billArray = [...billArray, bill]\n        } \n    }))\n\n    // pull out the duplicate utility IDs and add together the cost\n  billArray.forEach(function (a) {\n  if (!this[a.utility_id]) {\n      this[a.utility_id] = { utility_id: a.utility_id, utility_type: a.utility_type, cost: 0 };\n      costArray.push(this[a.utility_id]);\n  }\n  this[a.utility_id].cost += a.cost;\n}, Object.create(null));\n\n    return costArray\n}"]},"metadata":{},"sourceType":"module"}