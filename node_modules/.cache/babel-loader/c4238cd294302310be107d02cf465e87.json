{"ast":null,"code":"import _toConsumableArray from \"/Users/Matt/flatiron/mod-5/BillsHub-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { GetBillLabels } from \"./Labels\";\n\nvar getTimeToNextBill = function getTimeToNextBill(date) {\n  var one_day = 1000 * 60 * 60 * 24;\n  var date1 = new Date(date);\n  var date2 = new Date();\n  var diff = date2.getTime() - date1.getTime();\n  var diffPositive = Math.abs(diff);\n  return Math.ceil(diffPositive / one_day);\n};\n\nexport var sortDatesLowToHigh = function sortDatesLowToHigh(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a < b ? -1 : a > b ? 1 : 0;\n};\nexport var sortDatesHighToLow = function sortDatesHighToLow(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a > b ? -1 : a < b ? 1 : 0;\n};\nexport var returnSeries = function returnSeries(data) {\n  var values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  data.map(function (bill) {\n    if (getTimeToNextBill(bill.bill_date) < 304) {\n      var billDate = new Date(bill.bill_date);\n      var billMonthInt = billDate.getMonth();\n\n      if (billMonthInt > 6) {\n        values[billMonthInt - 12 + 6] = values[billMonthInt - 12 + 6] + bill.cost;\n      } else {\n        values[billMonthInt + 6] = values[billMonthInt + 6] + bill.cost;\n      }\n    }\n  });\n  var series = values.map(function (value) {\n    if (value === 0) {\n      return null;\n    } else {\n      return value;\n    }\n  });\n  return [series];\n};\nexport var GetMonthBillCosts = function GetMonthBillCosts(utilities) {\n  var costArray = [];\n  var billArray = [];\n  var today = new Date();\n  var monthInt = today.getMonth();\n  var filteredUtilities = utilities.filter(function (utility) {\n    return utility.bills.map(function (bill) {\n      return new Date(bill.bill_date).getMonth();\n    }).includes(monthInt);\n  });\n  filteredUtilities.map(function (utility) {\n    return utility.bills.map(function (bill) {\n      if (new Date(bill.bill_date).getMonth() === monthInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [].concat(_toConsumableArray(billArray), [bill]);\n      }\n    });\n  });\n  console.log(billArray);\n\n  var distinctUtilityId = _toConsumableArray(new Set(billArray.map(function (bill) {\n    return bill.utility_id;\n  })));\n\n  console.log(distinctUtilityId);\n  var uniq = billArray.map(function (bill) {\n    return {\n      count: 1,\n      utility_id: utility_id\n    };\n  }).reduce(function (a, b) {\n    a[b.utility_id] = (a[b.utility_id] || 0) + b.count;\n    return a;\n  }, {});\n  var duplicates = Object.keys(uniq).filter(function (a) {\n    return uniq[a] > 1;\n  });\n  console.log(duplicates);\n  return 'hello';\n};","map":{"version":3,"sources":["/Users/Matt/flatiron/mod-5/BillsHub-Frontend/src/variables/DateSort.jsx"],"names":["GetBillLabels","getTimeToNextBill","date","one_day","date1","Date","date2","diff","getTime","diffPositive","Math","abs","ceil","sortDatesLowToHigh","a","b","bill_date","sortDatesHighToLow","returnSeries","data","values","map","bill","billDate","billMonthInt","getMonth","cost","series","value","GetMonthBillCosts","utilities","costArray","billArray","today","monthInt","filteredUtilities","filter","utility","bills","includes","utility_type","console","log","distinctUtilityId","Set","utility_id","uniq","count","reduce","duplicates","Object","keys"],"mappings":"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","sourcesContent":["import { GetBillLabels } from \"./Labels\";\n\nconst getTimeToNextBill = (date) => {\n    let one_day=1000*60*60*24\n    let date1 = new Date(date)\n    let date2 = new Date()\n    let diff = date2.getTime() - date1.getTime()\n    let diffPositive = Math.abs(diff)\n    return Math.ceil(diffPositive/one_day)\n    }\n\n\nexport const sortDatesLowToHigh = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a < b ? -1 : a > b ? 1 : 0\n   }\n\nexport const sortDatesHighToLow = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a > b ? -1 : a < b ? 1 : 0\n   }\n\nexport const returnSeries = (data) => {\n    let values = [\n       0,0,0,0,0,0,0,0,0,0,0,0\n    ]\n\n    data.map(bill => {\n        if (getTimeToNextBill(bill.bill_date)<304){\n            let billDate = new Date(bill.bill_date)\n            let billMonthInt = billDate.getMonth()\n            if (billMonthInt > 6) {\n                 values[billMonthInt-12+6] = values[billMonthInt-12+6] + bill.cost\n                }else{\n                 values[billMonthInt+6] = values[billMonthInt+6] + bill.cost\n                }\n        }\n    })\n\n    let series = values.map(value => {if(value === 0){\n        return null\n    }else{\n        return value\n    }})\n    return [series]\n}\n\nexport const GetMonthBillCosts = (utilities) => {\n    let costArray = []\n    let billArray = []\n    let today = new Date()\n    let monthInt = today.getMonth()\n    let filteredUtilities = utilities.filter(utility => utility.bills.map(bill => new Date(bill.bill_date).getMonth()).includes(monthInt))\n    filteredUtilities.map(utility => utility.bills.map(bill => {\n        if(new Date(bill.bill_date).getMonth() === monthInt) {\n            bill.utility_type = utility.utility_type\n            billArray = [...billArray, bill]\n        } \n    }))\n    console.log(billArray) \n\n  let distinctUtilityId = [...new Set(billArray.map(bill => bill.utility_id))]\n  console.log(distinctUtilityId) \n\n\n\n  var uniq = billArray\n    .map(bill =>  {\n      return {\n        count: 1,\n        utility_id: utility_id\n      }\n    })\n    .reduce((a, b) => {\n      a[b.utility_id] = (a[b.utility_id] || 0) + b.count\n      return a\n    }, {})\n  \n  var duplicates = Object.keys(uniq).filter((a) => uniq[a] > 1)\n  \n  console.log(duplicates)\n\n    return 'hello'\n}"]},"metadata":{},"sourceType":"module"}