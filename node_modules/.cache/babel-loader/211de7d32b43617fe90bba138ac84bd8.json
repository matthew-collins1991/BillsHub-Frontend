{"ast":null,"code":"import _toConsumableArray from \"/Users/Matt/flatiron/mod-5/BillsHub-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar getTimeToNextBill = function getTimeToNextBill(date) {\n  var one_day = 1000 * 60 * 60 * 24;\n  var date1 = new Date(date);\n  var date2 = new Date();\n  var diff = date2.getTime() - date1.getTime();\n  var diffPositive = Math.abs(diff);\n  return Math.ceil(diffPositive / one_day);\n};\n\nvar GetMonthlyLabels = function GetMonthlyLabels() {\n  var today = new Date();\n  var monthInt = today.getMonth(); // puts todays month in center of graph\n\n  if (monthInt > 9) {\n    return monthlyLabels[monthInt - 12 + 3];\n  } else {\n    return monthlyLabels[monthInt + 3];\n  }\n};\n\nexport var sortDatesLowToHigh = function sortDatesLowToHigh(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a < b ? -1 : a > b ? 1 : 0;\n};\nexport var sortDatesHighToLow = function sortDatesHighToLow(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a > b ? -1 : a < b ? 1 : 0;\n};\nexport var returnSeries = function returnSeries(data) {\n  var values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  data.map(function (bill) {\n    if (getTimeToNextBill(bill.bill_date) < 304) {\n      var today = new Date();\n      var thisMonthInt = today.getMonth();\n      var billMonthInt = bill.bill_date.getMonth();\n\n      if (billMonthInt > 9) {\n        values[monthInt - 12 + 3] = values[monthInt - 12 + 3] + bill.cost;\n      } else {\n        value[monthInt + 3];\n      }\n    }\n  }); // 3 empty values at the end\n\n  var series = [,,,];\n\n  var totalsCopy = _toConsumableArray(data);\n\n  console.log(data); // unshift into series\n\n  while (series.length < 12 && totalsCopy.length > 0) {\n    series.unshift(totalsCopy.shift());\n  }\n\n  console.log(series);\n  return [series.map(function (b) {\n    return b.cost;\n  })];\n};","map":{"version":3,"sources":["/Users/Matt/flatiron/mod-5/BillsHub-Frontend/src/variables/DateSort.jsx"],"names":["getTimeToNextBill","date","one_day","date1","Date","date2","diff","getTime","diffPositive","Math","abs","ceil","GetMonthlyLabels","today","monthInt","getMonth","monthlyLabels","sortDatesLowToHigh","a","b","bill_date","sortDatesHighToLow","returnSeries","data","values","map","bill","thisMonthInt","billMonthInt","cost","value","series","totalsCopy","console","log","length","unshift","shift"],"mappings":"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","sourcesContent":["const getTimeToNextBill = (date) => {\n    let one_day=1000*60*60*24\n    let date1 = new Date(date)\n    let date2 = new Date()\n    let diff = date2.getTime() - date1.getTime()\n    let diffPositive = Math.abs(diff)\n    return Math.ceil(diffPositive/one_day)\n    }\n\n    const GetMonthlyLabels = () => {\n        let today = new Date()\n        let monthInt = today.getMonth()\n        // puts todays month in center of graph\n        if (monthInt > 9) {\n        return monthlyLabels[monthInt-12+3]\n        }else{\n        return monthlyLabels[monthInt+3]\n        }\n        \n    }\n\n\nexport const sortDatesLowToHigh = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a < b ? -1 : a > b ? 1 : 0\n   }\n\nexport const sortDatesHighToLow = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a > b ? -1 : a < b ? 1 : 0\n   }\n\nexport const returnSeries = (data) => {\n    const values = [\n       0,0,0,0,0,0,0,0,0,0,0,0\n    ]\n\n    data.map(bill => {\n        if (getTimeToNextBill(bill.bill_date)<304){\n            let today = new Date()\n            let thisMonthInt = today.getMonth()\n            let billMonthInt = bill.bill_date.getMonth()\n            if (billMonthInt > 9) {\n                 values[monthInt-12+3] = values[monthInt-12+3] + bill.cost\n                }else{\n                 value[monthInt+3]\n                }\n        }\n    })\n\n    // 3 empty values at the end\n    let series = [ , , , ]\n    let totalsCopy = [...data]\n    console.log(data)\n\n    // unshift into series\n\n    while (series.length < 12 && totalsCopy.length > 0) {\n        series.unshift(totalsCopy.shift())\n    }\n    \n    console.log(series)\n\n   return [series.map(b => b.cost)]\n}"]},"metadata":{},"sourceType":"module"}