{"ast":null,"code":"import _toConsumableArray from \"/Users/Matt/flatiron/mod-5/BillsHub-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// import { GetBillLabels } from \"./Labels\";\nexport var getTimeToNextBill = function getTimeToNextBill(date) {\n  var one_day = 1000 * 60 * 60 * 24;\n  var date1 = new Date(date);\n  var date2 = new Date();\n  var diff = date1.getTime() - date2.getTime();\n  return Math.ceil(diff / one_day);\n};\nexport var sortDatesLowToHigh = function sortDatesLowToHigh(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a < b ? -1 : a > b ? 1 : 0;\n};\nexport var sortDatesHighToLow = function sortDatesHighToLow(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a > b ? -1 : a < b ? 1 : 0;\n};\nexport var returnSeries = function returnSeries(data) {\n  var values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  data.map(function (bill) {\n    if (getTimeToNextBill(bill.bill_date) < 324) {\n      var billDate = new Date(bill.bill_date);\n      var billMonthInt = billDate.getMonth();\n      var billYearInt = billDate.getFullYear();\n      var today = new Date();\n      var yearInt = today.getFullYear();\n\n      if (billMonthInt > 6 && billYearInt === yearInt) {\n        return values[billMonthInt - 12 + 6] = values[billMonthInt - 12 + 6] + bill.cost;\n      } else {\n        return values[billMonthInt + 6] = values[billMonthInt + 6] + bill.cost;\n      }\n    }\n  });\n  var series = values.map(function (value) {\n    if (value === 0) {\n      return null;\n    } else if (isNaN(value)) {\n      return null;\n    } else {\n      return value;\n    }\n  });\n  return [series];\n};\nexport var GetMonthBillCostsAndLabels = function GetMonthBillCostsAndLabels(utilities) {\n  var costArray = [];\n  var billArray = [];\n  var today = new Date();\n  var monthInt = today.getMonth();\n  var yearInt = today.getFullYear(); // only select utilities that have a bill in current month\n\n  var filteredUtilities = utilities.filter(function (utility) {\n    return utility.bills.map(function (bill) {\n      return new Date(bill.bill_date).getMonth();\n    }).includes(monthInt);\n  });\n  filteredUtilities.map(function (utility) {\n    return utility.bills.map(function (bill) {\n      if (new Date(bill.bill_date).getMonth() === monthInt && new Date(bill.bill_date).getFullYear() === yearInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [].concat(_toConsumableArray(billArray), [bill]);\n      }\n    });\n  }); // pull out the duplicate utility IDs and add together the cost\n\n  billArray.forEach(function (a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n\n    this[a.utility_id].cost += a.cost;\n  }, Object.create(null));\n  return costArray;\n};\nexport var GetYearBillCostsAndLabels = function GetYearBillCostsAndLabels(utilities) {\n  var costArray = [];\n  var billArray = [];\n  var today = new Date();\n  var yearInt = today.getYear(); // only select utilities that have a bill in current month\n\n  var filteredUtilities = utilities.filter(function (utility) {\n    return utility.bills.map(function (bill) {\n      return new Date(bill.bill_date).getYear();\n    }).includes(yearInt);\n  });\n  filteredUtilities.map(function (utility) {\n    return utility.bills.map(function (bill) {\n      if (new Date(bill.bill_date).getYear() === yearInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [].concat(_toConsumableArray(billArray), [bill]);\n      }\n    });\n  }); // pull out the duplicate utility IDs and add together the cost\n\n  billArray.forEach(function (a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n\n    this[a.utility_id].cost = this[a.utility_id].cost + parseInt(a.cost);\n  }, Object.create(null));\n  return costArray;\n};\nexport var GetNextMonthBillCostsAndLabels = function GetNextMonthBillCostsAndLabels(utilities) {\n  var costArray = [];\n  var billArray = [];\n  var today = new Date();\n  var monthInt = today.getMonth() + 1;\n  var yearInt = today.getFullYear(); // only select utilities that have a bill in current month\n\n  var filteredUtilities = utilities.filter(function (utility) {\n    return utility.bills.map(function (bill) {\n      return new Date(bill.bill_date).getMonth();\n    }).includes(monthInt);\n  });\n  filteredUtilities.map(function (utility) {\n    return utility.bills.map(function (bill) {\n      if (new Date(bill.bill_date).getMonth() === monthInt && new Date(bill.bill_date).getFullYear() === yearInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [].concat(_toConsumableArray(billArray), [bill]);\n      }\n    });\n  }); // pull out the duplicate utility IDs and add together the cost\n\n  billArray.forEach(function (a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n\n    this[a.utility_id].cost += a.cost;\n  }, Object.create(null));\n  return costArray;\n};","map":{"version":3,"sources":["/Users/Matt/flatiron/mod-5/BillsHub-Frontend/src/variables/DateSort.jsx"],"names":["getTimeToNextBill","date","one_day","date1","Date","date2","diff","getTime","Math","ceil","sortDatesLowToHigh","a","b","bill_date","sortDatesHighToLow","returnSeries","data","values","map","bill","billDate","billMonthInt","getMonth","billYearInt","getFullYear","today","yearInt","cost","series","value","isNaN","GetMonthBillCostsAndLabels","utilities","costArray","billArray","monthInt","filteredUtilities","filter","utility","bills","includes","utility_type","forEach","utility_id","push","Object","create","GetYearBillCostsAndLabels","getYear","parseInt","GetNextMonthBillCostsAndLabels"],"mappings":"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","sourcesContent":["// import { GetBillLabels } from \"./Labels\";\n\nexport const getTimeToNextBill = (date) => {\n    let one_day=1000*60*60*24\n    let date1 = new Date(date)\n    let date2 = new Date()\n    let diff = date1.getTime() - date2.getTime()\n\n    return Math.ceil(diff/one_day)\n    }\n\n\nexport const sortDatesLowToHigh = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a < b ? -1 : a > b ? 1 : 0\n   }\n\nexport const sortDatesHighToLow = (a, b) => {\n    a = new Date(a.bill_date)\n    b = new Date(b.bill_date)\n    return a > b ? -1 : a < b ? 1 : 0\n   }\n\nexport const returnSeries = (data) => {\n    let values = [\n       0,0,0,0,0,0,0,0,0,0,0,0\n    ]\n\n    data.map(bill => {\n        if (getTimeToNextBill(bill.bill_date)<324){\n            let billDate = new Date(bill.bill_date)\n            let billMonthInt = billDate.getMonth()\n            let billYearInt = billDate.getFullYear()\n            let today = new Date()\n            let yearInt = today.getFullYear()\n\n            \n            if (billMonthInt > 6 && billYearInt===yearInt) {\n                 return values[billMonthInt-12+6] = values[billMonthInt-12+6] + bill.cost\n                }else{\n                return values[billMonthInt+6] = values[billMonthInt+6] + bill.cost\n                }\n        }\n    })\n    let series = values.map(value => {if(value === 0 ){\n        return null\n    }else if(isNaN(value)) {\n        return null\n    }else{\n        return value\n    \n    }})\n    \n    return [series]\n}\n\nexport const GetMonthBillCostsAndLabels = (utilities) => {\n    let costArray = []\n    let billArray = []\n    let today = new Date()\n    let monthInt = today.getMonth()\n    let yearInt = today.getFullYear()\n\n    // only select utilities that have a bill in current month\n    let filteredUtilities = utilities.filter(utility => utility.bills.map(bill => new Date(bill.bill_date).getMonth()).includes(monthInt))\n    filteredUtilities.map(utility => utility.bills.map(bill => {\n        if(new Date(bill.bill_date).getMonth() === monthInt && new Date(bill.bill_date).getFullYear() === yearInt) {\n            bill.utility_type = utility.utility_type\n            billArray = [...billArray, bill]\n        } \n    }))\n\n    // pull out the duplicate utility IDs and add together the cost\n  billArray.forEach(function (a) {\n  if (!this[a.utility_id]) {\n      this[a.utility_id] = { utility_id: a.utility_id, utility_type: a.utility_type, cost: 0 };\n      costArray.push(this[a.utility_id]);\n  }\n  this[a.utility_id].cost += a.cost;\n}, Object.create(null));\n    return costArray\n}\n\nexport const GetYearBillCostsAndLabels = (utilities) => {\n    let costArray = []\n    let billArray = []\n    let today = new Date()\n    let yearInt = today.getYear()\n\n    // only select utilities that have a bill in current month\n    let filteredUtilities = utilities.filter(utility => utility.bills.map(bill => new Date(bill.bill_date).getYear()).includes(yearInt))\n    filteredUtilities.map(utility => utility.bills.map(bill => {\n        if(new Date(bill.bill_date).getYear() === yearInt) {\n            bill.utility_type = utility.utility_type\n            billArray = [...billArray, bill]\n        } \n    }))\n\n    // pull out the duplicate utility IDs and add together the cost\n  billArray.forEach(function (a) {\n  if (!this[a.utility_id]) {\n      this[a.utility_id] = { utility_id: a.utility_id, utility_type: a.utility_type, cost: 0 };\n\n      costArray.push(this[a.utility_id]);\n\n  }\n\n\n  this[a.utility_id].cost = this[a.utility_id].cost + parseInt(a.cost);\n}, Object.create(null));\n   return costArray\n    \n}\n\n\nexport const GetNextMonthBillCostsAndLabels = (utilities) => {\n    let costArray = []\n    let billArray = []\n    let today = new Date()\n    let monthInt = today.getMonth()+1\n    let yearInt = today.getFullYear()\n\n    // only select utilities that have a bill in current month\n    let filteredUtilities = utilities.filter(utility => utility.bills.map(bill => new Date(bill.bill_date).getMonth()).includes(monthInt))\n    filteredUtilities.map(utility => utility.bills.map(bill => {\n        if(new Date(bill.bill_date).getMonth() === monthInt && new Date(bill.bill_date).getFullYear() === yearInt) {\n            bill.utility_type = utility.utility_type\n            billArray = [...billArray, bill]\n        } \n    }))\n\n    // pull out the duplicate utility IDs and add together the cost\n  billArray.forEach(function (a) {\n  if (!this[a.utility_id]) {\n      this[a.utility_id] = { utility_id: a.utility_id, utility_type: a.utility_type, cost: 0 };\n      costArray.push(this[a.utility_id]);\n  }\n  this[a.utility_id].cost += a.cost;\n}, Object.create(null));\n\n    return costArray\n}\n"]},"metadata":{},"sourceType":"module"}