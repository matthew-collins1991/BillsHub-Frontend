{"ast":null,"code":"import _toConsumableArray from \"/Users/Matt/flatiron/mod-5/BillsHub-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// import { GetBillLabels } from \"./Labels\";\nexport var getTimeToNextBill = function getTimeToNextBill(date) {\n  var one_day = 1000 * 60 * 60 * 24;\n  var date1 = new Date(date);\n  var date2 = new Date();\n  var diff = date1.getTime() - date2.getTime();\n  console.log('input: ' + date + \" date1: \" + date1 + \" date2: \" + date2 + \" diff: \" + diff);\n  return Math.ceil(diff / one_day);\n};\nexport var sortDatesLowToHigh = function sortDatesLowToHigh(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a < b ? -1 : a > b ? 1 : 0;\n};\nexport var sortDatesHighToLow = function sortDatesHighToLow(a, b) {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a > b ? -1 : a < b ? 1 : 0;\n};\nexport var returnSeries = function returnSeries(data) {\n  var values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  data.map(function (bill) {\n    if (Math.abs(getTimeToNextBill(bill.bill_date)) < 314) {\n      var billDate = new Date(bill.bill_date);\n      var billMonthInt = billDate.getMonth();\n\n      if (billMonthInt >= 6) {\n        return values[billMonthInt - 12 + 6] = values[billMonthInt - 12 + 6] + bill.cost;\n      } else {\n        return values[billMonthInt + 6] = values[billMonthInt + 6] + bill.cost;\n      }\n    }\n  });\n  var series = values.map(function (value) {\n    if (value === 0) {\n      return null;\n    } else if (isNaN(value)) {\n      return null;\n    } else {\n      return value;\n    }\n  });\n  return [series];\n};\nexport var GetMonthBillCostsAndLabels = function GetMonthBillCostsAndLabels(utilities) {\n  var costArray = [];\n  var billArray = [];\n  var today = new Date();\n  var monthInt = today.getMonth();\n  var yearInt = today.getFullYear(); // only select utilities that have a bill in current month\n\n  var filteredUtilities = utilities.filter(function (utility) {\n    return utility.bills.map(function (bill) {\n      return new Date(bill.bill_date).getMonth();\n    }).includes(monthInt);\n  });\n  filteredUtilities.map(function (utility) {\n    return utility.bills.map(function (bill) {\n      if (new Date(bill.bill_date).getMonth() === monthInt && new Date(bill.bill_date).getFullYear() === yearInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [].concat(_toConsumableArray(billArray), [bill]);\n      }\n    });\n  }); // pull out the duplicate utility IDs and add together the cost\n\n  billArray.forEach(function (a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n\n    this[a.utility_id].cost += a.cost;\n  }, Object.create(null));\n  return costArray;\n};\nexport var GetYearBillCostsAndLabels = function GetYearBillCostsAndLabels(utilities) {\n  var costArray = [];\n  var billArray = [];\n  var today = new Date();\n  var yearInt = today.getYear(); // only select utilities that have a bill in current month\n\n  var filteredUtilities = utilities.filter(function (utility) {\n    return utility.bills.map(function (bill) {\n      return new Date(bill.bill_date).getYear();\n    }).includes(yearInt);\n  });\n  filteredUtilities.map(function (utility) {\n    return utility.bills.map(function (bill) {\n      if (new Date(bill.bill_date).getYear() === yearInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [].concat(_toConsumableArray(billArray), [bill]);\n      }\n    });\n  }); // pull out the duplicate utility IDs and add together the cost\n\n  billArray.forEach(function (a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n\n    this[a.utility_id].cost = this[a.utility_id].cost + parseInt(a.cost);\n  }, Object.create(null));\n  return costArray;\n};\nexport var GetNextMonthBillCostsAndLabels = function GetNextMonthBillCostsAndLabels(utilities) {\n  var costArray = [];\n  var billArray = [];\n  var today = new Date();\n  var monthInt = today.getMonth() + 1;\n  var yearInt = today.getFullYear(); // only select utilities that have a bill in current month\n\n  var filteredUtilities = utilities.filter(function (utility) {\n    return utility.bills.map(function (bill) {\n      return new Date(bill.bill_date).getMonth();\n    }).includes(monthInt);\n  });\n  filteredUtilities.map(function (utility) {\n    return utility.bills.map(function (bill) {\n      if (new Date(bill.bill_date).getMonth() === monthInt && new Date(bill.bill_date).getFullYear() === yearInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [].concat(_toConsumableArray(billArray), [bill]);\n      }\n    });\n  }); // pull out the duplicate utility IDs and add together the cost\n\n  billArray.forEach(function (a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n\n    this[a.utility_id].cost += a.cost;\n  }, Object.create(null));\n  return costArray;\n};","map":{"version":3,"sources":["/Users/Matt/flatiron/mod-5/BillsHub-Frontend/src/variables/DateSort.jsx"],"names":["getTimeToNextBill","date","one_day","date1","Date","date2","diff","getTime","console","log","Math","ceil","sortDatesLowToHigh","a","b","bill_date","sortDatesHighToLow","returnSeries","data","values","map","bill","abs","billDate","billMonthInt","getMonth","cost","series","value","isNaN","GetMonthBillCostsAndLabels","utilities","costArray","billArray","today","monthInt","yearInt","getFullYear","filteredUtilities","filter","utility","bills","includes","utility_type","forEach","utility_id","push","Object","create","GetYearBillCostsAndLabels","getYear","parseInt","GetNextMonthBillCostsAndLabels"],"mappings":"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","sourcesContent":["// import { GetBillLabels } from \"./Labels\";\n\nexport const getTimeToNextBill = date => {\n  \n  let one_day = 1000 * 60 * 60 * 24;\n  let date1 = new Date(date);\n  let date2 = new Date();\n  let diff = date1.getTime() - date2.getTime();\n  console.log('input: ' + date + \" date1: \" + date1 + \" date2: \" + date2 + \" diff: \" + diff)\n\n  return Math.ceil(diff / one_day);\n};\n\nexport const sortDatesLowToHigh = (a, b) => {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a < b ? -1 : a > b ? 1 : 0;\n};\n\nexport const sortDatesHighToLow = (a, b) => {\n  a = new Date(a.bill_date);\n  b = new Date(b.bill_date);\n  return a > b ? -1 : a < b ? 1 : 0;\n};\n\nexport const returnSeries = data => {\n  let values = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  data.map(bill => {\n\n    if (Math.abs(getTimeToNextBill(bill.bill_date)) < 314) {\n      let billDate = new Date(bill.bill_date);\n      let billMonthInt = billDate.getMonth();\n\n      \n        if (billMonthInt >= 6) {\n            return (values[billMonthInt - 12 + 6] =\n            values[billMonthInt - 12 + 6] + bill.cost);\n        } else {\n            return (values[billMonthInt + 6] =\n            values[billMonthInt + 6] + bill.cost);\n        }\n        }\n  });\n  let series = values.map(value => {\n    if (value === 0) {\n      return null;\n    } else if (isNaN(value)) {\n      return null;\n    } else {\n      return value;\n    }\n  });\n\n  return [series];\n};\n\nexport const GetMonthBillCostsAndLabels = utilities => {\n  let costArray = [];\n  let billArray = [];\n  let today = new Date();\n  let monthInt = today.getMonth();\n  let yearInt = today.getFullYear();\n\n  // only select utilities that have a bill in current month\n  let filteredUtilities = utilities.filter(utility =>\n    utility.bills\n      .map(bill => new Date(bill.bill_date).getMonth())\n      .includes(monthInt)\n  );\n  filteredUtilities.map(utility =>\n    utility.bills.map(bill => {\n      if (\n        new Date(bill.bill_date).getMonth() === monthInt &&\n        new Date(bill.bill_date).getFullYear() === yearInt\n      ) {\n        bill.utility_type = utility.utility_type;\n        billArray = [...billArray, bill];\n      }\n    })\n  );\n\n  // pull out the duplicate utility IDs and add together the cost\n  billArray.forEach(function(a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n    this[a.utility_id].cost += a.cost;\n  }, Object.create(null));\n  return costArray;\n};\n\nexport const GetYearBillCostsAndLabels = utilities => {\n  let costArray = [];\n  let billArray = [];\n  let today = new Date();\n  let yearInt = today.getYear();\n\n  // only select utilities that have a bill in current month\n  let filteredUtilities = utilities.filter(utility =>\n    utility.bills\n      .map(bill => new Date(bill.bill_date).getYear())\n      .includes(yearInt)\n  );\n  filteredUtilities.map(utility =>\n    utility.bills.map(bill => {\n      if (new Date(bill.bill_date).getYear() === yearInt) {\n        bill.utility_type = utility.utility_type;\n        billArray = [...billArray, bill];\n      }\n    })\n  );\n\n  // pull out the duplicate utility IDs and add together the cost\n  billArray.forEach(function(a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n\n      costArray.push(this[a.utility_id]);\n    }\n\n    this[a.utility_id].cost = this[a.utility_id].cost + parseInt(a.cost);\n  }, Object.create(null));\n  return costArray;\n};\n\nexport const GetNextMonthBillCostsAndLabels = utilities => {\n  let costArray = [];\n  let billArray = [];\n  let today = new Date();\n  let monthInt = today.getMonth() + 1;\n  let yearInt = today.getFullYear();\n\n  // only select utilities that have a bill in current month\n  let filteredUtilities = utilities.filter(utility =>\n    utility.bills\n      .map(bill => new Date(bill.bill_date).getMonth())\n      .includes(monthInt)\n  );\n  filteredUtilities.map(utility =>\n    utility.bills.map(bill => {\n      if (\n        new Date(bill.bill_date).getMonth() === monthInt &&\n        new Date(bill.bill_date).getFullYear() === yearInt\n      ) {\n        bill.utility_type = utility.utility_type;\n        billArray = [...billArray, bill];\n      }\n    })\n  );\n\n  // pull out the duplicate utility IDs and add together the cost\n  billArray.forEach(function(a) {\n    if (!this[a.utility_id]) {\n      this[a.utility_id] = {\n        utility_id: a.utility_id,\n        utility_type: a.utility_type,\n        cost: 0\n      };\n      costArray.push(this[a.utility_id]);\n    }\n    this[a.utility_id].cost += a.cost;\n  }, Object.create(null));\n\n  return costArray;\n};\n"]},"metadata":{},"sourceType":"module"}